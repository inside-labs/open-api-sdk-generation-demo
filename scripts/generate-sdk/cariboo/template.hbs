import { makeApi, Zodios, type ZodiosOptions } from "@zodios/core";
import { z } from "zod";

{{#if imports}}
{{#each imports}}
import { {{{@key}}} } from "./{{{this}}}"
{{/each}}
{{/if}}


{{#if types}}
{{#each types}}
export {{{this}}};
{{/each}}
{{/if}}

{{#each schemas}}
export const {{@key}}{{#if (lookup ../emittedType @key)}}: z.ZodType<{{@key}}>{{/if}} = {{{this}}};
export type T{{@key}} = z.infer<typeof {{@key}}>;
{{/each}}


	export const endpoints = makeApi([
	{{#each endpoints}}
 {
	method: "{{method}}",
	path: "{{path}}",
	{{#if @root.options.withAlias}}
	{{#if alias}}
	alias: "{{alias}}",
	{{/if}}
	{{/if}}
	{{#if description}}
	description: `{{description}}`,
	{{/if}}
	{{#if requestFormat}}
	requestFormat: "{{requestFormat}}",
	{{/if}}
	{{#if parameters}}
	parameters: [
	{{#each parameters}}
	{
	name: "{{name}}",
	{{#if description}}
	description: `{{description}}`,
	{{/if}}
	{{#if type}}
	type: "{{type}}",
	{{/if}}
	schema: {{{schema}}}
	},
	{{/each}}
	],
	{{/if}}
	response: {{{response}}},
	{{#if errors.length}}
	errors: [
	{{#each errors}}
	{
	{{#ifeq status "default" }}
	status: "default",
	{{else}}
	status: {{status}},
	{{/ifeq}}
	{{#if description}}
	description: `{{description}}`,
	{{/if}}
	schema: {{{schema}}}
	},
	{{/each}}
	]
	{{/if}}
	},
	{{/each}}
	]);


	{{#each endpoints}}
	export const {{alias}}Response = {{{response}}};
	export type {{alias}}ResponseT = z.infer<typeof {{alias}}Response>;
	{{/each}}

    export const IL_APP_ORIGIN = "il-app";
    export const CARIBOO_ORIGIN_HEADER = "X-Origin";

	export function createApiClient(baseUrl: string, options?: ZodiosOptions) {
	return new Zodios(baseUrl, endpoints, {
		...options,
		axiosConfig: {
			...(options?.axiosConfig ?? {}),
			headers: {
				...(options?.axiosConfig?.headers ?? {}),
				[CARIBOO_ORIGIN_HEADER]: IL_APP_ORIGIN
			}
		}
	});
	}
